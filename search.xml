<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自己动手使用云服务器</title>
      <link href="/2025/02/12/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E4%BD%BF%E7%94%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2025/02/12/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E4%BD%BF%E7%94%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在这个信息化飞速发展的时代，云计算已经成为技术发展的重要基石。从个人网站到企业级应用，云服务器（VPS）几乎无处不在。作为一个喜欢折腾的技术爱好者，我决定亲自动手，去体验一次从零到一的云服务器搭建之旅。</p><p><strong>但究竟什么是云服务器呢？</strong> 简单来说，它就是一台运行在云端的虚拟计算机。你可以把它想象成一台远程的电脑，你可以通过网络连接它，在上面安装软件、存储数据、运行应用，就像使用自己的电脑一样。但与物理服务器不同的是，云服务器可以根据你的需求灵活地调整配置，按需付费，极大地降低了使用成本。</p><p>这次的目标很简单：<strong>购买一台云服务器，完成基本环境搭建，并部署一个实际可用的应用</strong>。</p><h2 id="域名（可以选的）"><a href="#域名（可以选的）" class="headerlink" title="域名（可以选的）"></a>域名（可以选的）</h2><p>首先买一个<strong>域名</strong>，我就到阿里云去买了一个，新人有优惠放心买</p><blockquote><p>为什么是可以选的呢？其实直接访问我们云服务器的ip地址也能访问到我们的服务器，当然有域名的话会好很多</p><p>在使用云服务器时，域名（Domain Name）是一个不可忽视的重要部分。相比直接使用服务器的 IP 地址，域名不仅更易记忆，还能通过 DNS（域名系统）解析，实现更灵活的访问方式。</p></blockquote><p>买了之后跟着流程进行<strong>实名认证</strong></p><p>然后到阿里云域名管理地址。添加一个解析记录，主机记录填www、纪录值填：我们的服务器ip</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-1.png"></p><h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p>大学生搭建个人服务器有什么用呢? 无非不就是搭建个人网站这些，所以服务器的选型就很关键，当然我们是使用<strong>云服务器</strong>来进行</p><h3 id="选购"><a href="#选购" class="headerlink" title="选购"></a>选购</h3><p>下面来选购一下云服务器，服务器规格按自身需求而选（最重要的是选好操作系统，一定要选好，否则的话换系统很麻烦）。服务器收费方式有两种：一种是按流量计费（不推荐），一种是包年包月（对于学生党来说比较划算）。</p><p>直接去阿里云拿卷买服务器去或者选择其他的平台，现在一些校园计划对学生和新用户比较友好，可以先买一年玩一下</p><p>可以看<a href="https://www.zhihu.com/tardis/zm/art/598981113">四款学生云服务器优惠推荐（25周岁以下免认证可以直接购买）</a>这个博客有介绍</p><p>然后我选择的<strong>腾讯云</strong>，别问为什么了，都是因为阿里云的新用户我给用了再退款，然后就没新用户优惠了，凑合着用吧</p><p>腾讯云的服务器购买成功后会在站内信里发给你相关信息，如公网ip，用户名，密码等</p><p><a href="https://console.cloud.tencent.com/message">https://console.cloud.tencent.com/message</a></p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-2.png" style="zoom: 67%;"><p>记得<strong>重置密码</strong>哦！！！</p><p>那新拿到手的服务器要怎么去使用呢？</p><p>可以看腾讯云的官方的文档<a href="https://cloud.tencent.com/document/product/1207/44578">轻量应用服务器 使用第三方 SSH 终端登录 Linux 实例-操作指南-文档中心-腾讯云</a></p><p>先登陆</p><h3 id="使用第三方-SSH-终端登录-Linux-实例"><a href="#使用第三方-SSH-终端登录-Linux-实例" class="headerlink" title="使用第三方 SSH 终端登录 Linux 实例"></a><strong>使用第三方 SSH 终端登录 Linux 实例</strong></h3><p><strong>鉴权方式</strong>：<strong>密码</strong>或<strong>密钥</strong></p><p><strong>前提条件</strong>：您已获取登录实例的用户名及密码（或密钥）。</p><p>请确认本地计算机与实例之间的网络连通正常，以及实例的防火墙已放行22端口（创建实例时默认已开通22端口）。</p><p><strong>操作步骤</strong></p><p>使用密码登陆</p><p>以Xshell登陆为例：</p><h4 id="一、下载Xshell"><a href="#一、下载Xshell" class="headerlink" title="一、下载Xshell"></a>一、下载Xshell</h4><p>要下载Xshell，当然能下盗版破解版的就不要下载正版的了，<a href="https://www.123pan.com/s/yYD5Vv-0g7Vv.html">https://www.123pan.com/s/yYD5Vv-0g7Vv.html</a></p><p>在网盘下载完之后解压缩，点击<code>!绿化.bat</code>，桌面会自动化生成Xshell程序</p><p>打开Xshell-帮助-关于Xshell，查看破解情况</p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-3.png" style="zoom:67%;"><p>如上述所示即表示成功破解，可以放心使用啦。</p><h4 id="二、然后接下来是通过Xshell登陆的过程"><a href="#二、然后接下来是通过Xshell登陆的过程" class="headerlink" title="二、然后接下来是通过Xshell登陆的过程"></a>二、然后接下来是通过Xshell登陆的过程</h4><ol><li><p>打开 Xshell 工具，单击<strong>新建</strong>，新建一个会话</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-4.png"></p></li><li><p>在新建会话属性的弹窗中，确定好会话名称，输入轻量应用服务器的公网 IP，单击<strong>确定</strong></p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-5.png"></p></li><li><p>找到步骤2新建的会话，右键单击<strong>属性</strong>。</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-6.png"></p></li><li><p>在<strong>连接</strong> &gt; <strong>用户身份验证</strong>页面，填写腾讯云轻量应用服务器的用户名和密码，单击<strong>确定</strong>。</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-7.png"></p></li><li><p>找到步骤2新建的会话，单击<strong>连接</strong>。</p></li><li><p>登录成功后，界面显示如下（以 我的 为例）：</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-8.png"></p></li></ol><p>其他的登陆方式自己去看官方文档吧！！<a href="https://cloud.tencent.com/document/product/1207/44578">轻量应用服务器 使用第三方 SSH 终端登录 Linux 实例-操作指南-文档中心-腾讯云</a></p><p>ok连接好之后就要使用服务器了，我买的服务器刚好是宝塔Linux面板的</p><h3 id="宝塔面板"><a href="#宝塔面板" class="headerlink" title="宝塔面板"></a>宝塔面板</h3><h4 id="介绍一下"><a href="#介绍一下" class="headerlink" title="介绍一下"></a>介绍一下</h4><p>这里简单的介绍一下宝塔面板。</p><p>宝塔面板是开发的服务器管理工具，是一家专业从事服务器相关软件和服务研发的公司。宝塔的愿景是让用户更容易使用服务器。</p><p>说话简单，不要使事情复杂化。大型网站程序安装在服务器上。服务器使用 Linux 系统。对于服务器维护，需要记住很多linux命令，这很麻烦。面板的优点是可以通过交互界面完成服务器的维护，比如更新系统、添加网站、修改设置等，之前需要记住各种命令。现在，您可以单击面板上的按钮以节省时间和精力。</p><p>所以我们可以在宝塔面板上搭建网站，通过宝塔面板向网站上传文件等等。</p><h4 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h4><p>下面我们通过XShell直接安装宝塔面板</p><ol><li><p>连接服务器，连接方式看上面。连接成功后在终端上输入安装指令：</p><pre class="line-numbers language-none"><code class="language-none">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装时间大概五分钟，期间不要退出面板（安装期间会有两个选项，全选y即可）<img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-9.png"></p><p>上图的外网地址与内网地址，以及账号密码要保存好！！！（切记），地址中所涉及的端口（图片中为8888，但是端口是随机分配的，要根据实际情况而定）要在服务器上开放，怎么开放端口看上面步骤。</p></li><li><p>打开浏览器输入外网地址</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-10.png"></p><p>出现如上图的登录界面则表示宝塔面板真的安装成功。这里注意，一般用外网地址登录宝塔，内网一般登录不了。原因是浏览器的默认SSL证书与宝塔安装的SSL证书不匹配，用内网登录会显示无法连接。</p><p>出现登录界面后，输入账号密码（刚才安装成功后出现的那个账号密码，进入宝塔后可以更改密码），点击登录进入宝塔。</p></li><li><p>下载必要插件以及建站</p><p>登录宝塔后会弹出相应的安装界面，推荐选择左边的LNMP（兼容性好一点），根据需要选择插件版本（默认的是适配版本，服务器牛逼的话可以全部装最新版本）</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-11.png"></p><p>安装时间大概十分钟，安装速度要看网络信号好不好，安装完成后直接关闭界面。</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-12.png"></p><p> 点击左侧栏的“网站”，点击添加站点。</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-15.png"></p></li></ol><p>至此，网站搭建已全部完成</p><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><p>然后先上传一个文件看看效果</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-14.png"></p><p>我上传了自己写的html的一个压缩包</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-16.png"></p><p>然后进行解压</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-17.png"></p><p>然后在浏览器上输入域名进行访问</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-18.png"></p><p>无论是手机还是电脑都是能访问的，不同项目（react、vue、java等等）都是有些不同的，可以自己去探索一下哦！</p><p>然后后面就好好折腾折腾，搭建个个人博客分享自己的学习笔记以及创造也是很不错的哦！</p><h2 id="SSL证书问题"><a href="#SSL证书问题" class="headerlink" title="SSL证书问题"></a>SSL证书问题</h2><p>细心的小伙伴会发现怎么访问域名的时候会显示</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-19.png"></p><p>是不是有病毒呀SOS</p><p>其实不是的，遇到“此网站没有证书”或“此连接不安全”的警告时，通常意味着你正在访问的网站没有使用HTTPS加密，或者其SSL证书存在问题。这样的连接不安全，因为信息（如密码或信用卡信息）在传输过程中可能会被第三方截获。以下是几种解决方法：</p><ol><li>**确认网址是否正确：**首先确保你输入的网址正确无误。有时，打字错误可能会导向一个恶意网站。</li><li>**查找安全的HTTPS版本：**确保网址以“https://”开头，而不是“http://”。HTTPS表示网站已加密，更安全。如果网站有HTTPS版本，请使用它。</li><li><strong>联系网站管理员</strong>：如果你正在尝试访问的是一个重要且应该安全的网站（比如银行或在线购物网站），但出现了安全警告，可能是因为其SSL证书过期或配置不正确。在这种情况下，你可以尝试联系该网站的管理员或客服，通知他们问题所在。</li><li>**更新浏览器：**确保你的浏览器是最/新版本。旧版本的浏览器可能无法正确识别最/新的安全证书。</li><li>**安装浏览器安全扩展：**有些浏览器扩展如HTTPS Everywhere可以强制浏览器连接到网站的HTTPS版本（如果可用）。</li><li>**暂时绕过警告：**如果你完全信任该网站，且需要紧急访问（不推荐做法），大多数浏览器允许你继续访问该网站，但这会增加安全风险。请确保不在此类网站上输入敏感信息。</li><li>请记住，安全第一。如果不确定网站的安全性，请不要轻易忽视浏览器发出的安全警告。</li><li>最后，每个网站都应该使用 HTTPS 协议，实现该安全协议的方式就是申请SSL证书（<strong>点击查看</strong><a href="https://www.ihuandu.com/ssl.html"><strong>SSL证书型号列表</strong></a>，或者直接访问：<a href="https://www.ihuandu.com/ssl.html">https://www.ihuandu.com/ssl.html</a> ）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小玩意儿 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些可以美化 Markdown 的表情符号</title>
      <link href="/2025/02/09/markdown-icon/"/>
      <url>/2025/02/09/markdown-icon/</url>
      
        <content type="html"><![CDATA[<p>参考</p><p><a href="https://gist.github.com/rxaviers/7360908">Complete list of github markdown emoji markup</a></p><p>常用的：</p><p> 🐾 <code>:feet:</code></p><p>💭 <code>:thought_balloon:</code></p><p>👊 <code>:punch:</code></p><p>💩 <code>:shit:</code></p><p>😊 <code>:blush:</code></p><p> ❤️ <code>:heart:</code></p><p>✌️ <code>:v:</code></p><p> 💧 <code>:droplet:</code></p><p><strong>☀️</strong> <code>:sunny:</code></p><p>🌐 <code>:globe_with_meridians:</code></p><p>🌗 <code>:last_quarter_moon:</code></p><p>🌍 <code>:earth_africa:</code></p><p>⛅️ <code>:partly_sunny:</code></p><p>💻 <code>:computer:</code></p><p>📁 <code>:file_folder:</code></p><p>✒️ <code>:black_nib:</code></p><p>📝 <code>:pencil:</code></p><p>⚠️ <code>:warning:</code></p><p> 🔴 <code>:red_circle:</code></p><p>⭕️ <code>:o:</code></p><p>✔️ <code>:heavy_check_mark:</code></p><p>🚦 <code>:vertical_traffic_light:</code></p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小玩意儿 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细说图床&amp;&amp;搭建自己的图床</title>
      <link href="/2025/02/09/%E7%BB%86%E8%AF%B4%E5%9B%BE%E5%BA%8A&amp;&amp;%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/"/>
      <url>/2025/02/09/%E7%BB%86%E8%AF%B4%E5%9B%BE%E5%BA%8A&amp;&amp;%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="图床是什么？"><a href="#图床是什么？" class="headerlink" title="图床是什么？"></a>图床是什么？</h1><p>图床其实是互联网中存储图片的空间，举个栗子：</p><p>假设你在微博分享一张图片，你的粉丝可以通过互联网看到你分享的图片，那么他是去访问你的手机的相册吗？其实不是的，你分享图片，也就是把图片上传到微博的服务器，微博将为你生成一个独一无二的访问链接，这个链接指向的空间其实就是图床。</p><h1 id="为什么要用图床？"><a href="#为什么要用图床？" class="headerlink" title="为什么要用图床？"></a>为什么要用图床？</h1><p>因为像我一样热爱在网上分享博客的人，需要使用图床来进行表达。使用图床的人通常采用Markdown的方式去编辑文字。</p><h2 id="有什么直接去使用的图床"><a href="#有什么直接去使用的图床" class="headerlink" title="有什么直接去使用的图床?"></a>有什么直接去使用的图床?</h2><ul><li><a href="https://www.picgo.net/">PicGo - 免费图床，贴出分享，图显不凡</a> 这个应该很稳定</li><li><a href="https://www.helloimg.com/?lang=zh-CN">Hello图床 - 免费图片上传-图片外链-免费公共图床</a></li><li>其他自己去找找</li></ul><h1 id="自己搭建一个属于自己博客"><a href="#自己搭建一个属于自己博客" class="headerlink" title="自己搭建一个属于自己博客"></a>自己搭建一个属于自己博客</h1><p>使用<strong>Github + JsDelivr</strong></p><p>Github更稳定,配置起来也还是很方便</p><h3 id="一-首先新建一个公开仓库："><a href="#一-首先新建一个公开仓库：" class="headerlink" title="一 首先新建一个公开仓库："></a>一 首先新建一个公开仓库：</h3><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-1.png"></p><p><strong>生成token令牌</strong></p><p>其中的<strong>token</strong>是十分重要的，我来带大家生成一下这个token </p><p>1.在自己的头像选择setting—» Developer setting —» Personal access tokens —-» token( classic ) ——» Generate new token —&gt; (the second) New personal access token(classic) </p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-11.png"></p><blockquote><p>生成后的token必需要<strong>保留</strong>，因为只显示一次的！！！！</p></blockquote><h3 id="二-上传一张图片到仓库之后，就已经可以当做图床使用"><a href="#二-上传一张图片到仓库之后，就已经可以当做图床使用" class="headerlink" title="二 上传一张图片到仓库之后，就已经可以当做图床使用"></a>二 上传一张图片到仓库之后，就已经可以当做图床使用</h3><p>// 我蠢，我还不会上传文件或者图片，我学我学</p><ol><li><p>创建一个新文件</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-6.png"></p></li><li><p>按步骤来完成配置</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-2.png"></p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-3.png"></p></li><li><p>然后点击该文件，上传文件就好啦</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-4.png"></p></li></ol><p>效果要这样的哦</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-5.png"></p><ol start="4"><li><p>怎么让图片显示呢？ 先复制图片的地址</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-7.png"></p></li><li><p>编写代码</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-8.png"></p><pre class="line-numbers language-none"><code class="language-none">![](复制的路径)  //显示图片的语法<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-9.png"></p></li></ol><h3 id="那会创建了，那就要使用，看看使用的情况"><a href="#那会创建了，那就要使用，看看使用的情况" class="headerlink" title="那会创建了，那就要使用，看看使用的情况"></a>那会创建了，那就要使用，看看使用的情况</h3><p>就这样了</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-10.png"></p><blockquote><p>那怎么在外面去使用呢？例如：Markdown 一般上传一张图片到仓库之后，就已经可以当做图床使用</p></blockquote><blockquote><p>蠢蠢的我想到了cv大法，但是图片显示不出来</p></blockquote><p>后来知道了:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">![](https://github.com/KlayPeter/mmx_img/blob/main/iu%E5%A3%81%E7%BA%B8.webp)--- 将blob改为raw![](https://github.com/KlayPeter/mmx_img/raw/main/iu%E5%A3%81%E7%BA%B8.webp)不信试试真的诶！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>github加载图片是很慢的，怎么去引入JsDeliver的加速地址？</strong></p></blockquote><h3 id="github引入JsDeliver的加速地址"><a href="#github引入JsDeliver的加速地址" class="headerlink" title="github引入JsDeliver的加速地址"></a>github引入JsDeliver的加速地址</h3><blockquote><h3 id="jsDelivr简介"><a href="#jsDelivr简介" class="headerlink" title="jsDelivr简介"></a><strong>jsDelivr简介</strong></h3><p>是一个免费、快速和可信赖的CDN加速服务，声称它每个月可以支撑680亿次的请求。服务在Github上是开源的，<strong><a href="https://link.zhihu.com/?target=https://github.com/jsdelivr/jsdelivr">jsDelivr地址</a></strong> 。目前，它提供了针对npm、Github和WordPress的加速服务，只需要一行代码就可以获得加速效果。只要我们的项目中用到了第三方的静态资源，譬如JavaScript脚本，css样式表，图片，图标，Flash等静态资源文件都应该考虑接入到CDN中</p></blockquote><p><strong>开始操作：</strong> 首先在图床仓库中点击release发布版本</p><p><img src="https://pic4.zhimg.com/v2-4350b19a0496049bc7cd35cbaadabb87_r.jpg" alt="https://pic4.zhimg.com/v2-4350b19a0496049bc7cd35cbaadabb87_r.jpg"></p><p>自定义发布版（记得版本填写时要enter）</p><p><img src="https://pic4.zhimg.com/80/v2-55c57ab90caffa7339eb62c5944601a7_1440w.webp" alt="img"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是github图上的原始路径![](https://github.com/KlayPeter/mmx_img/raw/main/iu%E5%A3%81%E7%BA%B8.webp)加速之后！！！----- https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径<span class="token title important"><span class="token punctuation">##</span>注意不要把`raw/main/`加进去哦</span>![](https://fastly.jsdelivr.net/gh/KlayPeter/mmx_img@v1.0.0/iu%E5%A3%81%E7%BA%B8.webp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>知道怎么去手动创建了，但是好累，费时间，那么有什么工具提供给我们学习呢?</p></blockquote><h2 id="采用工具来帮我们做事"><a href="#采用工具来帮我们做事" class="headerlink" title="采用工具来帮我们做事"></a>采用工具来帮我们做事</h2><ul><li><strong>PicGo</strong>：一个用于快速上传图片并获取图片链接的跨平台工具</li><li><strong>uPic</strong>：功能和上面一样，纯 macOS 系统支持，所以在 mac 下面交互体验比上面流畅不少，还有对应移动端 APP</li></ul><p>上面两款工具使用方式都是一样的，针对<code>Github</code>做图床都需要获取<code>token</code>供第三方图床工具使用。</p><p>推荐使用工具的理由如下：</p><ul><li>快速方便：只需要建立仓库配置一下接口</li><li>稳定，毕竟大厂商（但需要注意的是<code>Github</code>图片仓库过大的时候记得换仓库）</li><li><code>JsDelivr</code>解决<code>Github</code>在国内访问慢以及流量问题</li></ul><p><strong>现在就让我们来学习学习使用PicGo来实现上传github图床吧！</strong></p><ol><li>首先先下载PicGo 到官网下载即可<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#picgo-is-here">https://picgo.github.io/PicGo-Doc/zh/guide/#picgo-is-here</a></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#run</span>./PicGo-2.4.0-beta.6.AppImage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-%E5%9B%BE%E5%BA%8A-13.png"></p><ol start="2"><li>然后打开PicGo在PicGo里面进行配置( 每一项都要配置清楚 )</li></ol><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2%20-%E5%9B%BE%E5%BA%8A-12.png"></p><ol start="3"><li>将这些东西配置好之后，就可以正常上传图床啦！（留意token，库名等等的正确性）</li></ol><p>最后记得再把加速链接jsdelivr设置一下, 就大功告成啦！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://fastly.jsdelivr.net/gh/<span class="token punctuation">[</span>Username<span class="token punctuation">]</span>/<span class="token punctuation">[</span>Ku<span class="token punctuation">]</span>@main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>到这里就结束啦，好好写markdown和博客吧！</strong></p><hr><p><strong>参考博客</strong></p><p>1.<a href="https://mp.weixin.qq.com/s/l7rB4uhs7STzAFohc9Bw1g">https://mp.weixin.qq.com/s/l7rB4uhs7STzAFohc9Bw1g</a></p><p>2.<a href="https://blog.csdn.net/qq_39921135/article/details/136278309">Typora结合PicGo + 使用Github搭建个人免费图床_picgo整合typora-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小玩意儿 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VuePress + Github Pages 搭建个人博客</title>
      <link href="/2025/02/09/%E4%BD%BF%E7%94%A8VuePress%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/02/09/%E4%BD%BF%E7%94%A8VuePress%E6%90%AD%E5%BB%BA%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>先贴一下成果链接，这个是我的学习博客</p><p> <a href="https://klaypeter.github.io/learning-share/">https://klaypeter.github.io/learning-share/</a></p><h2 id="0-VuePress"><a href="#0-VuePress" class="headerlink" title="0. VuePress"></a>0. VuePress</h2><p>快速开始<a href="https://vuepress.vuejs.org/zh/guide/getting-started.html">同 VuePress 官网</a>：</p><h2 id="1-本地搭建"><a href="#1-本地搭建" class="headerlink" title="1. 本地搭建"></a>1. 本地搭建</h2><ol><li>创建并进入一个新目录</li></ol><pre class="line-numbers language-none"><code class="language-none">// 文件名自定义mkdir vuepress-starter &amp;&amp; cd vuepress-starter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>使用你喜欢的包管理器进行初始化</li></ol><pre class="line-numbers language-none"><code class="language-none">yarn init # npm init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>将 VuePress 安装为本地依赖</li></ol><pre class="line-numbers language-none"><code class="language-none">yarn add -D vuepress # npm install -D vuepress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>创建你的第一篇文档，VuePress 会以 docs 为文档根目录，所以这个 README.md 相当于主页：</li></ol><pre class="line-numbers language-none"><code class="language-none">mkdir docs &amp;&amp; echo '# Hello VuePress' &gt; docs/README.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>在 package.json 中添加一些 scripts</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">"docs:dev"</span><span class="token operator">:</span> <span class="token string">"vuepress dev docs"</span><span class="token punctuation">,</span>    <span class="token string-property property">"docs:build"</span><span class="token operator">:</span> <span class="token string">"vuepress build docs"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>在本地启动服务器</li></ol><pre class="line-numbers language-none"><code class="language-none">yarn docs:dev # npm run docs:dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>VuePress 会在 <a href="http://localhost:8080/">http://localhost:8080</a> (opens new window) 启动一个热重载的开发服务器。</p><h2 id="2-基础配置"><a href="#2-基础配置" class="headerlink" title="2. 基础配置"></a>2. 基础配置</h2><p>在文档目录下创建一个 <code>.vuepress</code> 目录，所有 VuePress 相关的文件都会被放在这里。此时你的项目结构可能是这样：</p><pre class="line-numbers language-none"><code class="language-none">.├─ docs│  ├─ README.md│  └─ .vuepress│     └─ config.js└─ package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>.vuepress</code> 文件夹下添加 <code>config.js</code>，配置网站的标题和描述，方便 SEO：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'TypeScript4 文档'</span><span class="token punctuation">,</span>  <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">'TypeScript4 最新官方文档翻译'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-添加导航栏"><a href="#3-添加导航栏" class="headerlink" title="3. 添加导航栏"></a>3. 添加导航栏</h2><p>我们现在在页首的右上角添加导航栏，修改 <code>config.js</code>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>    <span class="token literal-property property">themeConfig</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">nav</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'/'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                 <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'冴羽的 JavaScript 博客'</span><span class="token punctuation">,</span>                 <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Github'</span><span class="token punctuation">,</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'https://github.com/mqyqingfeng'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'掘金'</span><span class="token punctuation">,</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'https://juejin.cn/user/712139234359182/posts'</span> <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多的配置参考 <a href="https://vuepress.vuejs.org/zh/theme/default-theme-config.html#%E5%AF%BC%E8%88%AA%E6%A0%8F">VuePress 导航栏</a>。</p><h2 id="4-添加侧边栏"><a href="#4-添加侧边栏" class="headerlink" title="4. 添加侧边栏"></a>4. 添加侧边栏</h2><p>现在我们添加一些 md 文档，目前文档的目录如下：</p><pre class="line-numbers language-none"><code class="language-none">.├─ docs│  ├─ README.md│  └─ .vuepress│     └─ config.js|  └─ handbook|    └─ ConditionalTypes.md|    └─ Generics.md└─ package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在 <code>config.js</code> 配置如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">module.exports <span class="token operator">=</span> <span class="token punctuation">{</span>    themeConfig: <span class="token punctuation">{</span>        nav: <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>,        sidebar: <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                title: <span class="token string">'欢迎学习'</span>,                path: <span class="token string">'/'</span>,                collapsable: false, // 不折叠                children: <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> title: <span class="token string">"学前必读"</span>, path: <span class="token string">"/"</span> <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>              title: <span class="token string">"基础学习"</span>,              path: <span class="token string">'/handbook/ConditionalTypes'</span>,              collapsable: false, // 不折叠              children: <span class="token punctuation">[</span>                <span class="token punctuation">{</span> title: <span class="token string">"条件类型"</span>, path: <span class="token string">"/handbook/ConditionalTypes"</span> <span class="token punctuation">}</span>,                <span class="token punctuation">{</span> title: <span class="token string">"泛型"</span>, path: <span class="token string">"/handbook/Generics"</span> <span class="token punctuation">}</span>              <span class="token punctuation">]</span>,            <span class="token punctuation">}</span>          <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-更换主题"><a href="#5-更换主题" class="headerlink" title="5. 更换主题"></a>5. 更换主题</h2><p>现在基本的目录和导航功能已经实现，但如果我还想要加载 loading、切换动画、模式切换（暗黑模式）、返回顶部、评论等功能呢，为了简化开发成本，我们可以直接使用主题，这里使用的主题是 <a href="https://vuepress-theme-reco.recoluan.com/">vuepress-theme-reco</a>：</p><p>现在我们安装 vuepress-theme-reco：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vuepress-theme-reco --save-dev<span class="token comment"># or</span><span class="token function">yarn</span> <span class="token function">add</span> vuepress-theme-reco<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在 <code>config.js</code> 里引用该主题：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">'reco'</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-添加文章信息"><a href="#6-添加文章信息" class="headerlink" title="6. 添加文章信息"></a>6. 添加文章信息</h2><p>但我们也会发现，像条件类型这一篇文章，<code>条件类型（Conditional Types）</code> 竟然出现了两遍，这是因为这个主题自动提取了第一个大标题作为本文的标题，我们可以在每篇文章的 md 文件中添加一些信息修改：</p><pre class="line-numbers language-none"><code class="language-none">---title: 条件类型author: 冴羽date: '2021-12-12'---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-设置语言"><a href="#7-设置语言" class="headerlink" title="7. 设置语言"></a>7. 设置语言</h2><p>注意，上图的文章时间，我们写入的格式为 <code>2021-12-12</code> ，但是显示的是 <code>12/12/2021</code>，这是因为 VuePress 默认的 lang 为 <code>en-US</code>，我们修改一下 config.js：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">'/'</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">lang</span><span class="token operator">:</span> <span class="token string">'zh-CN'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-开启目录结构"><a href="#8-开启目录结构" class="headerlink" title="8. 开启目录结构"></a>8. 开启目录结构</h2><p>在原本的主题里，我们发现每篇文章的目录结构出现在左侧：</p><p>而 vuepress-theme-reco 将原有的侧边栏的中的多级标题移出，生成子侧边栏，放在了页面的右侧，如果你要全局开启，可在页面 config.js 里设置开启：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">//...</span>  <span class="token literal-property property">themeConfig</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">subSidebar</span><span class="token operator">:</span> <span class="token string">'auto'</span>  <span class="token punctuation">}</span>  <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-修改主题颜色"><a href="#9-修改主题颜色" class="headerlink" title="9. 修改主题颜色"></a>9. 修改主题颜色</h2><p>VuePress 基于 Vue，所以主题色用的是 Vue 的绿色，然而 TypeScript 的官方色则是蓝色，那如何修改 VuePress 的主题色呢？</p><p>你可以创建一个 <code>.vuepress/styles/palette.styl</code> 文件，文件代码如下：</p><pre class="line-numbers language-none"><code class="language-none">$accentColor = #3178c6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时可以发现主题颜色变了：</p><p>更多的颜色修改参考 VuePress 的 <a href="https://vuepress.vuejs.org/zh/config/#palette-styl">palette.styl</a>。</p><h2 id="10-自定义修改样式"><a href="#10-自定义修改样式" class="headerlink" title="10. 自定义修改样式"></a>10. 自定义修改样式</h2><p>如果你想自定义修改一些 DOM 元素的样式呢？就比如在暗黑模式下：</p><p>我们发现用作强调的文字颜色比较暗淡，在暗黑模式下看不清楚，我想改下这个文字的颜色和背景色呢？</p><p>而 VuePress 提供了一种添加额外样式的简便方法。你可以创建一个 <code>.vuepress/styles/index.styl</code> 文件。这是一个 Stylus 文件，但你也可以使用正常的 CSS 语法。</p><p>我们在 .vupress 文件夹下创建这个目录，然后创建 index.styl 文件，代码如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// 通过检查，查看元素样式声明.dark .content__default code</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>58<span class="token punctuation">,</span>58<span class="token punctuation">,</span>92<span class="token punctuation">,</span>0.7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那之前我们提到的隐藏每篇文章的标题、作者、时间呢，其实也是类似的方式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.page .page-title</span> <span class="token punctuation">{</span>   <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-部署"><a href="#11-部署" class="headerlink" title="11. 部署"></a>11. 部署</h2><p>我们的博客就算是正式的做好了，接下来我们部署到免费的 Github Pages 上。我们在 Github 上新建一个仓库，这里我取得仓库名为：<code>learn-typescript</code>。</p><p>对应，我们需要在 <code>config.js</code> 添加一个 <code>base</code> 路径配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// 路径名为 "/&lt;REPO&gt;/"</span>    <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">'/learn-typescript/'</span><span class="token punctuation">,</span>  <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终的 <code>config.js</code> 文件内容为：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'TypeScript4 文档'</span><span class="token punctuation">,</span>    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">'TypeScript4 最新官方文档翻译'</span><span class="token punctuation">,</span>    <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">'/learn-typescript/'</span><span class="token punctuation">,</span>    <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">'reco'</span><span class="token punctuation">,</span>    <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string-property property">'/'</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token literal-property property">lang</span><span class="token operator">:</span> <span class="token string">'zh-CN'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">themeConfig</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// lastUpdated: '上次更新',</span>        <span class="token literal-property property">subSidebar</span><span class="token operator">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span>        <span class="token literal-property property">nav</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'/'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                 <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'冴羽的 JavaScript 博客'</span><span class="token punctuation">,</span>                 <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Github'</span><span class="token punctuation">,</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'https://github.com/mqyqingfeng'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'掘金'</span><span class="token punctuation">,</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'https://juejin.cn/user/712139234359182/posts'</span> <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">sidebar</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'欢迎学习'</span><span class="token punctuation">,</span>                <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>                <span class="token literal-property property">collapsable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"学前必读"</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span> <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>              <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"基础学习"</span><span class="token punctuation">,</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/handbook/ConditionalTypes'</span><span class="token punctuation">,</span>              <span class="token literal-property property">collapsable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"条件类型"</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/handbook/ConditionalTypes"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"泛型"</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/handbook/Generics"</span> <span class="token punctuation">}</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h3><p>然后我们在项目 <code>vuepress-starter</code> 目录下建立一个脚本文件：<code>deploy.sh</code>，注意修改一下对应的用户名和仓库名：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env sh</span><span class="token comment"># 确保脚本抛出遇到的错误</span><span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span><span class="token comment"># 生成静态文件</span><span class="token function">npm</span> run docs:build<span class="token comment"># 进入生成的文件夹</span><span class="token builtin class-name">cd</span> docs/.vuepress/dist<span class="token function">git</span> init<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'deploy'</span><span class="token comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span><span class="token function">git</span> push <span class="token parameter variable">-f</span> git@github.com:mqyqingfeng/learn-typescript.git master:gh-pages<span class="token builtin class-name">cd</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后命令行切换到 <code>vuepress-starter</code> 目录下，执行 <code>sh deploy.sh</code>，就会开始构建，然后提交到远程仓库，注意这里提交到了 <code>gh-pages</code> 分支，我们查看下对应仓库分支的代码：</p><blockquote><p>关于这个执行的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在windows 的终端是运行不了的</span><span class="token comment"># 可以到git bash里面运行，也就是模仿linux环境了</span><span class="token number">86130</span>@MMXYY2377 MINGW64 /f/个人/博客/my-blog$ <span class="token function">sh</span> deploy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>至此，我们完成了 VuePress 和 Github Pages 的部署！！！！</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小玩意儿 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细说翻墙</title>
      <link href="/2025/02/09/%E7%BB%86%E8%AF%B4%E7%BF%BB%E5%A2%99/"/>
      <url>/2025/02/09/%E7%BB%86%E8%AF%B4%E7%BF%BB%E5%A2%99/</url>
      
        <content type="html"><![CDATA[<p>翻墙 <span class="github-emoji"><span>👣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f463.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>翻墙翻墙，各个都说会说翻墙，都会翻墙，但是呢你是不是其实并不太懂翻墙的具体含义吧，那就让我们了解一下并学会使用吧<span class="github-emoji"><span>🐾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>文中含引用的文章：[第一篇:超详细的科普教程 | 小帅同学的博客 (xs2021.github.io)](<a href="https://xs2021.github.io/2021/05/06/1">https://xs2021.github.io/2021/05/06/1</a>. 翻牆科普/#!)</p><p>这位大佬的博客主题，以及防爬机制等做得很好，全瞻仰大佬</p><p>国内禁止的敏感词</p><blockquote><p>敏感词：vpn、翻墙、梯子、科学上网</p><p>代替词：越狱、富强、代理、魔法上网、fq</p></blockquote><h2 id="科普一下"><a href="#科普一下" class="headerlink" title="科普一下"></a>科普一下</h2><h3 id="1-什么是长城防火墙"><a href="#1-什么是长城防火墙" class="headerlink" title="1.什么是长城防火墙?"></a>1.什么是长城防火墙?</h3><p>长城防火墙的英文全称叫:The Great Firewall，也就是我们俗称的”墙”。长城防火墙的存在是为了规范和监管中国互联网，它通过相关硬件和软件防火墙组成的一道过滤网，用于保护中国大陆的网络环境。它监管着所有的跨境互联网流量，并阻止中国大陆网民访问一些外部Web服务。这就是所谓的“长城防火墙”。</p><h3 id="2-关于科学上网"><a href="#2-关于科学上网" class="headerlink" title="2.关于科学上网"></a>2.关于科学上网</h3><p>科学上网(也叫<code>翻牆</code> )，所谓的“科学上网”，也就是通过一些技术手段来绕过中国长城防火墙的监管和限制，去访问一些国外的网站和服务。而想要绕过中国长城防火墙的监管和限制，就必须要使用“科学上网工具”。<br>翻牆有多重要，我想无需过多解释「Gmail的邮件、Youtube的视频、Google某段程序的bug、国外的公开课视频、Netflix上的新剧.…<br>我想先提醒读者:<strong>没有完美的翻牆软件，不要这样期望</strong>。</p><h3 id="3-翻牆原理和方式。"><a href="#3-翻牆原理和方式。" class="headerlink" title="3.翻牆原理和方式。"></a>3.翻牆原理和方式。</h3><p>**科学上网的原理:**通过 vpn、ss、ssr、v2ray、代理等对上网流量、数据加密，以此躲避GFw (长城防火墙)检测，实现自由上网，也被用于数据传输安全、网络匿名、隐私保护亲<br>**适用:**Windows、Linux、Mac、Android、l0s、路由器、TV 等全平台</p><p>下面用张图看一下整个流程</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20240406235505105.png" alt="image-20240406235505105"></p><blockquote><p>通俗点来说:「国内网络有一个GFW监管，国内的网络无法直达国外的网站，然后找个中介(国外代理服务器)，可以绕过GFW监管，让我们的网络由国内转到国外，这时即可访问国外网站。」</p><p><strong>此时可能会有这样的疑问:网络转到国外后还能正常访问国内网站吗?</strong><br>不用担心，目前的代理软件都有这样的功能:</p><ul><li>直连模式:不用代理线路，直接访问，相当于没翻牆</li><li><strong>全局模式</strong>:不管什么网站都用代理线路访问</li><li><strong>PAC模式</strong>:自动判断网站是国内还是国外，如果是国外则智能选择代理线路</li><li>自定义规则:国内网站走什么线路、国外网站走什么线路</li></ul></blockquote><p><strong>目前翻牆方式介绍</strong><br>1、<code>vpn</code><br>vpn 的流量特征过于明显容易被 GFW 防火墙识别，且价格昂贵，现在已不提倡使用。<br>2、<code>SS、SSR、V2ray 机场</code><br>SS、SSR、V2ray 是什么?<br>三个都是目前科学上网比较主流的加密协议,通过加密混淆伪装成正常流量，让 GFW 防火墙识别更困难。<br>3、 <code>搭建自己的科学上网服务器</code><br>需要一定动手能力，只要你有网络，几分钟便能搭建一台可以科学上网的代理服务器，科学上网的终极姿势。<br>上面的<code> ss、sSR、v2ray 机场</code> 实际上就是替你完成了搭建这一步，直接向你提供搭建好的节点供你使用。</p><p>此方案理论永久可行，尤其是在出现特殊情况，比如:封锁严重，大面积科学上网失效的时候作为应急方案。IP 被封更换 IP 即可，适合喜欢折腾的同学。小白建议还是用机场，省事省心。</p><p>4、<code>代理(Proxy)类</code><br>比如蓝灯(基于SOCKS5加密协议),在代理类的“科学上网”工具中，最具代表性的就是:蓝灯。在中国互联网审查还没有非常严峻的前些年，蓝灯是大部分人翻牆的首选，它也是最受欢迎的翻牆工具。但随着近几年互联网审查越来越严，蓝灯也慢慢失去了它“翻牆首选”的称号，经常掉线。尤其是在每年比较敏感的几个时间段，都会出现无法翻或者频繁掉线的情况。</p><h3 id="4-机场是什么"><a href="#4-机场是什么" class="headerlink" title="4.机场是什么?"></a>4.机场是什么?</h3><p><strong>专为翻墙而生的机场梯子</strong></p><p>VPN并非专为翻墙而生，而机场是。</p><p>通常由第三方大厂承担搭建，直接向用户提供 ss、ssr、v2ray 节点服务,<br>免去个人搭建流程，更快捷，线路优化也更好。<br><strong>机场是老司机和小白皆可的一种方案，省事省心，稳定性和速度兼顾。</strong></p><p><img src="https://gfwoff.com/wp-content/uploads/2022/08/%E6%9C%BA%E5%9C%BA%E5%92%8Cvpn%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="机场和vpn的区别"></p><p>机场针对中国网络有专门的优化线路，海外翻墙VPN都没有优化线路所以你在国内用起来感觉很慢，而机场采用境内服务器中转流量数据，数据经过全程加密，达到既安全又快速的翻墙体验。</p><p>目前为止，很多在国内流行的VPN客户端，其实也是内置的机场节点，使用机场常用的 SS/SSR/V2ray/Trojan 翻墙协议，只是套了一个壳，叫做VPN也只是为了方便更多人记住它。</p><h3 id="5-翻牆后能做什么"><a href="#5-翻牆后能做什么" class="headerlink" title="5.翻牆后能做什么?"></a>5.翻牆后能做什么?</h3><p>嘿嘿嘿<span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="6-国内使用vpn的常见问题"><a href="#6-国内使用vpn的常见问题" class="headerlink" title="6.国内使用vpn的常见问题 ?"></a>6.国内使用vpn的常见问题 ?</h3><h4 id="6-1、国内为什么封杀vpn"><a href="#6-1、国内为什么封杀vpn" class="headerlink" title="6.1、国内为什么封杀vpn?"></a>6.1、国内为什么封杀vpn?</h4><p>众所周知，中国大陆的防火墙(GFW)屏蔽了大量的海外网站，于是带来了“翻牆”的需要大量网民使用vpn来绕过GFW的封锁、访问墙外网站。为了阻止国内网民使用vpn翻牆，中国自然会封杀vpn。</p><h4 id="6-2、个人使用vpn违法吗"><a href="#6-2、个人使用vpn违法吗" class="headerlink" title="6.2、个人使用vpn违法吗?"></a>6.2、个人使用vpn违法吗?</h4><p>翻牆 ≠ 违法<br>近年来中国出现了几起因为翻牆被抓的事件，现在可以明确的是:在中国私自出售vpn服务是违法的，但至于个人使用vpn违法与否，现在并没有明确的答案。事实上，中国每天都有不计其数的人因为个人或工作需要来使用vpn翻牆，这其中不仅包括翻牆看新闻、翻牆看油管，也包括外贸往来，留学生和学校联系等等。如果这些个人使用vpn都算违法而被法律制裁，那么估计这么多违法的人也是处理不过来的。总之，对于“个人使用vpn违法吗?”这样的问题，大家目前不需要过于担心，但使用vpn应尽量保持低调。</p><h4 id="6-3、用vpn会被发现吗"><a href="#6-3、用vpn会被发现吗" class="headerlink" title="6.3、用vpn会被发现吗?"></a>6.3、用vpn会被发现吗?</h4><p>网络运营商是可以随时监控网民的互联网使用情况的。理论上说，使用vpn是可以被运营商发现的(虽然通过vpn访问了哪些网站未必能被发现)。目前有些vpn加入了伪装、混淆功能来避免vpn流量被发现，但GFW也在不断升级，所以不要以为用vpn就不会被发现。</p><h4 id="6-4、是否会被喝茶"><a href="#6-4、是否会被喝茶" class="headerlink" title="6.4、是否会被喝茶"></a>6.4、是否会被喝茶</h4><p><strong>1 传播翻牆方法</strong><br>不要自行将翻牆方法公布于国内等社交平台，2019年4月有人因为分享 自己的VPS搭建方式而遭到拘役两天。</p><p><strong>2 vpn盈利</strong><br>如果提供翻牆软件，并以此为盈利。根据工信部规定:“未经电信主管部门批准，不得自行建立或租用专线(含虚拟专用网络vpn)等其他信道开展跨境经营活动”。所以未经过有关部门允许，在中国大陆卖vpn是违法的。过去在2019年1月刘某因提供翻牆服务被判有期徒刑三年、并处以五十万元罚金，且没收所有非法所得，罪行可说是相当严重，也请网友千万不要以身试法。</p><p><strong>3 危害国家安全</strong><br>如果有朋友掌握了翻牆方法后在Twitter转播一些中国政府禁止的言论或者图片，也可能面临请喝茶的风险。这种威胁国家安全的情况可能就比普通的违法行为更加复杂一些，也请各位网友注意。</p><blockquote><p>在中国有上千万的网友和你一样使用着VPN浏览海外网站，使用 Telegram、Clubhouse 和 Instagram 等国外流行的软件，订阅 Netflix、HBO、Disney+ 等流媒体服务，这种突破<a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E">互联网防火长城</a>的行为俗称为「翻墙」。可以说，没有翻墙软件，很多工作都无法正常进行，互联网工作者可以很容易的自己搭建VPN进行翻墙，其他网民可能更多的是选择购买配套成熟的翻墙服务。</p></blockquote><h1 id="那要怎么翻墙呢？"><a href="#那要怎么翻墙呢？" class="headerlink" title="那要怎么翻墙呢？"></a>那要怎么翻墙呢？</h1><p>首先你得翻墙才能翻墙</p><p>算了，不乱说了哈哈哈<span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><ol><li><p>先安装<strong>翻墙软件</strong>，个人推荐是<strong>Clash</strong>(windows、linux都有的)</p><p>上连接：这些看看能不能安装，之前很简单的</p><p><a href="https://docs.gtk.pw/contents/quickstart.html#url-%E5%AF%BC%E5%85%A5">CFW 快速上手 | Clash for Windows 代理工具使用说明</a></p><p><img src="https://img.picui.cn/free/2024/11/01/6724a0d28dbb0.png"></p><p>或者其他：<strong>Hiddify</strong>等</p></li><li><p>找一个稳定可靠的<strong>梯子网站</strong>：要花点小钱的</p><p>网上一大把，看你自己</p><p>我现在在用：<a href="http://www.efc1.net/dashboard">EFCloud</a></p><p>买了个100G无限用的，其实也用不了多少的，月租贵</p></li><li><p><strong>代理配置</strong></p><p>看文档：<a href="https://docs.gtk.pw/contents/windows/clash.html#%E6%B7%BB%E5%8A%A0-clash-%E9%85%8D%E7%BD%AE%E8%AE%A2%E9%98%85">在 Windows 上使用 Clash For Windows | Clash for Windows 代理工具使用说明</a></p><p>或者梯子网站自带的一键订阅功能</p></li></ol><p>现在可以去尝试尝试啦<span class="github-emoji"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小玩意儿 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习建议</title>
      <link href="/2025/02/04/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/"/>
      <url>/2025/02/04/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前端的一个小小的学习建议（基础篇）"><a href="#前端的一个小小的学习建议（基础篇）" class="headerlink" title="前端的一个小小的学习建议（基础篇）"></a>前端的一个小小的学习建议（基础篇）</h1><p><span class="github-emoji"><span>🐾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 首先你们从大一就可以开始学习前端的相关知识，我觉得太棒了 ，因为我是一路摸索滚打才慢慢找到路子的，并且基本比你们晚一年的时间投入学习的，所以对你们抱有很大的期待，我其实水平也不算特别高，但也有一些自己的学习想法和思考，希望能给大家带来点帮助！<span class="github-emoji"><span>👊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h1 id="pencil-基础"><a href="#pencil-基础" class="headerlink" title=":pencil: 基础"></a><span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 基础</h1><p>建议的是在mdn官网跟着学习一系列</p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>基本必学，启蒙之一，最不可以缺少的</p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p>这是我个人感觉使用最难的部分了，感觉语法什么的还行，但是真正做项目的时候会发现，太难啦！！！！我css还需继续加强，我们共同努力<span class="github-emoji"><span>👊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>scss</p><p>ts - js</p><ul><li><p>一些css的基础用法得熟练，不然你会不快乐并且效率很低的</p></li><li><p>记住CSS的数据类型</p></li><li><p>读懂CSS的语法</p></li><li><p>多动手练习</p></li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>这个是特别重要的，是前端的逻辑，学习难度也是最大的</p><p>跟着教程来学，多运用、敲案例</p><h1 id="pencil-多看大佬博客文章或者书籍"><a href="#pencil-多看大佬博客文章或者书籍" class="headerlink" title=":pencil: 多看大佬博客文章或者书籍"></a><span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 多看大佬博客文章或者书籍</h1><p>几位大佬的链接博客：</p><blockquote><p><a href="https://ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程：语法篇 - 阮一峰的网络日志</a></p><p><a href="https://www.zhangxinxu.com/wordpress/">张鑫旭-鑫空间-鑫生活 (zhangxinxu.com)</a></p><p><a href="https://github.com/chokcoco/iCSS">chokcoco/iCSS: 不止于 CSS (github.com)</a></p><p><a href="https://www.cnblogs.com/vectorx/category/1975212.html">Web前端从入门到精通 - 随笔分类 - VectorX - 博客园</a></p></blockquote><p>书籍推荐：（恰逢双11，平时上水课也可以看看）</p><ul><li><p>《JavaScript高级程序设计（第3版）》红皮书</p></li><li><p>《JavaScript权威指南 》犀牛书</p></li><li><p>《CSS权威指南》</p></li></ul><h1 id="pencil-资源and网站："><a href="#pencil-资源and网站：" class="headerlink" title=":pencil: 资源and网站："></a><span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 资源and网站：</h1><p><strong>计算机基础：</strong></p><p><code>计算机网络基础</code>：</p><ul><li><a href="https://book.douban.com/subject/24737674/">图解 tcp/ip</a></li><li><a href="https://book.douban.com/subject/25863515/">图解 Http</a></li></ul><p><code>算法和数据结构</code>：</p><ul><li><a href="https://book.douban.com/subject/26979890/">算法图解</a></li></ul><p><code>数据库</code> ：</p><ul><li><a href="https://www.howie6879.com/post/2016/03_mysql-tutorial/">MySQL 基本操作</a></li></ul><p><code>Linux</code>：</p><ul><li><a href="https://zorrozou.github.io/">穷佐罗的 Linux 图书</a></li><li>[中国科技大学的 Linux 图书](</li></ul><p><strong>前端：</strong></p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web">面向开发者的 Web 技术 | MDN</a></p></li><li><p><a href="https://zh.javascript.info/">现代 JavaScript 教程</a></p></li><li><p>CSS的规范 <a href="https://www.w3.org/Style/CSS/current-work">CSS current work &amp; how to participate (w3.org)</a></p></li><li><p><a href="https://www.runoob.com/">菜鸟教程 - 学的不仅是技术，更是梦想！</a></p></li></ul><p><strong>后端：</strong></p><p>推荐看的前端进阶学习路线的文章（可以参考）</p><p><a href="https://mp.weixin.qq.com/s/0jtVxlh-toEmNbwJpIfAuA">写给初中级前端的高级进阶指南（万字路线）</a></p><h1 id="现在真的要用点时间来缕一缕喔现在的学习路线了（我可是要做一个全栈程序员！！！）"><a href="#现在真的要用点时间来缕一缕喔现在的学习路线了（我可是要做一个全栈程序员！！！）" class="headerlink" title="现在真的要用点时间来缕一缕喔现在的学习路线了（我可是要做一个全栈程序员！！！）"></a>现在真的要用点时间来缕一缕喔现在的学习路线了（我可是要做一个全栈程序员！！！）</h1><h2 id="学习类"><a href="#学习类" class="headerlink" title="学习类"></a>学习类</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ol><li><p>3大件，怎么说呢，已经是有基础的了，那么就速度过一遍啥的。<strong>《 1周 》</strong></p><blockquote><p> 图解算法：–备战一下蓝桥杯这些</p><p> CSS 笔记、建议与指导<a href="https://github.com/chadluo/CSS-Guidelines">https://github.com/chadluo/CSS-Guidelines</a>  【看一下，写一下】</p><p> 现代 JavaScript 教程<a href="https://zh.javascript.info/">https://zh.javascript.info/</a>   【补补缺失的或者不懂的】</p></blockquote></li><li><p>看《ECMAScript 6 入门教程》 《 http图解 》<strong>《1周》</strong></p></li><li><p>快速过一下TypeScript的官方文档  框架学习 <strong>《2周》</strong></p><blockquote><p> TypeScript<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/">https://zhongsp.gitbooks.io/typescript-handbook/content/</a></p><p> Vue.js 技术揭秘 <a href="https://github.com/ustbhuangyi/vue-analysis">https://github.com/ustbhuangyi/vue-analysis</a></p></blockquote></li><li><p>设计学习 <strong>《1周》</strong></p><blockquote><p>写给大家看的设计书（第4版）</p><p>设计一下使用以下figma</p></blockquote></li><li><p>简单学一下这个两个框架 <strong>《2周》</strong></p><blockquote><p>Angular入门教程<a href="https://angular.cn/start">https://angular.cn/start</a></p><p>React入门教程<a href="https://zh-hans.reactjs.org/tutorial/tutorial.html">https://zh-hans.reactjs.org/tutorial/tutorial.html</a></p></blockquote></li><li><p>熟悉常用的前端构建工具Webpack、Grunt</p></li></ol><h3 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h3><ol><li><p>Node.js学习，用Node.js写 <strong>《1.5周》</strong></p><blockquote><p>七天学会 Node.js<a href="http://nqdeng.github.io/7-days-nodejs/">http://nqdeng.github.io/7-days-nodejs/</a></p></blockquote></li><li><p>简单的使用java写一份接口 ，总结接口，前端再渲染（借助ai自己玩一下）<strong>《1.5周》</strong></p></li><li><p>使用python爬虫 + 写接口**《3周》**数据库用mongoDB</p></li><li><p>数据库</p></li><li><p>了解Nacos</p></li></ol><h3 id="小程序："><a href="#小程序：" class="headerlink" title="小程序："></a>小程序：</h3><ol><li><p>微信小程序的学习：《3周》</p><blockquote><p>微信小程序开发资源汇总<a href="https://github.com/justjavac/awesome-wechat-weapp">https://github.com/justjavac/awesome-wechat-weapp</a></p></blockquote></li><li><p>uniapp的学习《3周》</p></li></ol><h3 id="工程："><a href="#工程：" class="headerlink" title="工程："></a>工程：</h3><ol><li><p>git <strong>《1周》</strong></p><blockquote><p>有书</p><p>猴子都能懂 Git 入门 <a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a></p></blockquote></li><li><p>Nginx**《1周》**</p><blockquote><p><a href="https://juejin.cn/post/6844903793918738440">https://juejin.cn/post/6844903793918738440</a></p></blockquote></li><li><p>运行环境**《1周》**</p><blockquote><p>图解浏览器的基本工作原理<a href="https://zhuanlan.zhihu.com/p/47407398">https://zhuanlan.zhihu.com/p/47407398</a></p></blockquote></li></ol><p>探索类：</p><p>1. </p><p>首先，前端开发流程：</p><p>需求评审</p><blockquote><p>一般在做需求评审时，PRD里只有交互稿，尚未有视觉稿。需要在评审结束并达成一致后，再输出视觉稿。</p></blockquote><p>1、需求分析：</p><p>2、涉及渠道/环境：</p><ul><li>App：App原生页面、<strong>App内嵌H5</strong>、App内嵌小程序。</li><li>小程序：技术栈视角：小程序原生页面、<strong>小程序内嵌H5</strong>、App内嵌小程序。</li><li>普通H5：微信H5、M站（即普通浏览器环境）</li><li>B端：运营管理平台等等</li></ul><p>3、 可行性分析：是否有技术上的实现难点，是否有其他的依赖条件。</p><p>4、 数据来源：哪些是调接口，哪些是做成<strong>可配置</strong>，哪些是前端写死；可配置的部分，是前端读取，还是接口读取然后返给前端。提示：可配置的灵活性与风险正相关。（前后端之间的沟通）</p><p>5、 异常流设计：容错、容灾、兜底、降级、回退机制、风险可控。prd一般只写了正常流的逻辑，异常流往往需要研发同学配合做全盘考虑。</p><p>6、需求变更：如有需求不明确、改需求、加需求、砍需求、加时间、改时间、加人力等等，需要提前预判风险。</p><p>视觉评审</p><p>1、进度跟进：<strong>视觉稿是分批交付，还是一次性给到</strong>？这是要首先考虑的。</p><p>按照历史经验，前端项目进度的延误，有一半的概率依赖于视觉稿的进度；因为一个新页面的开发，前端有30%~50%的工作在做页面构建。</p><p>2、视觉稿的文件格式：</p><ul><li><p>Sketch 原型设计软件：.sketch 格式。一般用来画<strong>视觉稿</strong>。</p></li><li><p>Figma 原型设计软件：.fig 格式。</p></li><li><p>Axure 原型设计软件：：.rp 格式。Axure 一般用来画<strong>交互稿</strong>。如果是输出高保真的视觉稿，推荐用 Sketch 或 Figma。</p></li><li><p>Photoshop 软件： .psd 格式。专门做<strong>图片处理</strong>。当然，有些CP外包人员的技能单一，喜欢用PS输出视觉稿。</p></li><li><p>Adobe Illustrator 软件（简称AI软件）：.ai格式。制作矢量图。</p></li><li><p>Adobe After Effects（AE） 软件：.aep 格式。制作动画。</p></li></ul><p><a href="https://www.figma.com/community/file/1038450359694759149">Figma</a> 是最近比较火的全平台原型设计软件</p><p>【划重点】交付视觉稿时，需要视觉同学输出“<strong>带尺寸标注</strong>”的视觉规范文件。</p><p>3、检查需求：是否覆盖需求和交互设计中的全部设计点。</p><p>4、检查视觉规范：</p><ul><li>样式和配色，是否符合页面和产品的整体风格。</li><li>尺寸规范：移动端的视觉稿宽度是750px。</li><li>排版、对齐、一致性。推荐阅读书籍《写个大家看的设计书》，了解基本的设计原则。</li><li>字体：字号大小（一般是12px以上，特别小的是10px以上）、字重（注意bold属性值为700），以及有哪些<strong>特殊字体</strong>。尤其要注意字体的版权问题。</li></ul><p>5、哪些图是前端构建，哪些图是写死图片资源，哪些是可配置；可配置的图中，需要把每个元素做拆解，这个元素是合并到背景图中，还是单独切图，还是读取数据。</p><p>6、切图格式：png（透明格式）、jpg</p><p>切图的图片大小，不要太大。移动端的大图（比如幕帘弹窗的背景图）建议不超过50kb，小图建议不超过20kb。图片在上传之前，可以先在 <a href="https://tinypng.com/">https://tinypng.com/</a> 上进行压缩。</p><p>7、复杂图形、动画的实现难度和实现方式，技术评估。详见接下来要讲的「技术选型」。</p><p><strong>排期评估</strong></p><p>1、排期一般包含这几个要素：</p><ul><li>开发时间：视觉构建时长、接口文档（接口协议）交付时间、前后端联调时间、自测时间</li><li>转体验时间</li><li>转测时间</li><li>上线时间（以及，需确认业务投放时间）</li></ul><p>2、评估排期时，<strong>要根据视觉稿排期</strong>，不要根据交互稿排期。这是首先要强调的。一个新页面的开发，前端有30%~50%的工作在做页面构建。 只看交互稿的话，无法评估真实的开发工作量。</p><p>3、前端开发工作包括：概要设计、视觉构建、逻辑代码、前后端联调、自测、转体验。每一项都要单独拆解后评估时间，加在一起就是整体的排期。</p><p>4、排期时，要考虑其它的依赖因素：比如视觉稿延期、需求不明确、接口进度、测试进度，当然最重要的是上线进度。紧急项目，经常是根据上线时间倒推开发排期。</p><p>5、即将进入开发阶段后，与测试部门协调测试资源，确认转测时间；大型项目&amp;重点项目，需要在需求评审阶段，提前知会测试部门，让其预留时间。</p><p>6、如果自己有在并行开发其他项目，则排期时需要给自己预留 buffer。并行开发两个项目是家常便饭；但，这个项目在测试时，往往很难抽身去做别的项目，因为会一直被测试童鞋牵制。</p><p>7、开发排期：如果开发排期有变更，需要立即周知其他相关人员，尤其是要评估测试排期的风险。测试排期比开发排期 更难变更。</p><p><strong>技术选型</strong></p><blockquote><p>技术选型千变万化，百家争鸣。这里需要列出你所在部门的常用技术选型，并非市面上的技术栈罗列。</p></blockquote><p>1、页面开发框架：</p><p>（1）多端页面：（小程序原生页面、H5）</p><ul><li><a href="https://taro-docs.jd.com/">Taro 框架</a>（基于 React技术栈）</li></ul><p>注2：有些业务，一开始只做H5，后来迭代时，要求做小程序原生页面。这一点也要纳入需求评估。</p><p>（2）H5页面：<a href="https://v3.cn.vuejs.org/guide/introduction.html">Vue.js</a> 框架、React 框架</p><p>（3）App端：</p><ul><li>Android端开发语言：Kotlin（新）、Java（老）</li><li>iOS端开发语言：Swift（新）、Objective-C（老）</li></ul><p>（4）B端开发，UI框架：</p><ul><li>React 技术栈：<a href="https://ant.design/index-cn">Ant Design</a>（简称Antd）</li><li>Vue 技术栈：<a href="https://element.eleme.cn/#/zh-CN">Element</a>、<a href="https://antdv.com/components/overview-cn">Ant Design Vue</a></li><li>较简单的CSS响应式框架：<a href="https://www.bootcss.com/">Bootstrap</a></li></ul><p>（5）Node.js后端开发框架：</p><ul><li>Koa：新一代 Node.js 框架。</li><li><a href="https://eggjs.github.io/zh/">Egg.js</a>：Egg 是在Koa基础上进一步封装的企业级Web开发框架。</li><li>Express：比较老的Node.js 框架。</li></ul><p>2、CSS预处理器：SASS</p><p>3、复杂图形、动画的实现难度和实现方式，技术评估：</p><ul><li>gif 动图：尽量不用。因为文件太大，且效果模糊。</li><li>CSS3 动画：适合简单的、有规律的动画。举例：<a href="https://www.cnblogs.com/qianguyihao/p/8435182.html">摆动的鱼</a>、<a href="https://mp.weixin.qq.com/s/u5GHsA0vHz8A_MmGslRw2g">京喜工厂</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023022423592576">Canvas</a>：Canvas 动画、小程序分享图采用 Canvas 绘制</li><li>3D动画：<a href="https://www.zoo.team/article/webglabout">WebGL</a>（<a href="http://www.webgl3d.cn/Three.js/">Three.js</a> 是 WebGL 的综合库）常见案例：太阳系</li><li>游戏框架：Cocos 引擎</li></ul><p><strong>概要设计</strong></p><ul><li>需求背景及资源</li><li>风险评估</li><li>技术选型</li><li>项目结构设计</li><li>主要功能点逻辑设计</li><li>可扩展可复用设计</li><li>依赖接口</li><li>工作量拆解和排期</li></ul><p><strong>开发环节</strong></p><p>1、代码设计：</p><p>（1）目录结构设计、代码风格</p><p>（2）公共组件、工具类设计：确保<strong>可复用</strong>、高内聚低耦合的原则。哪些可以复用京喜平台的公共组件，哪些需要自己单独写 components、utils。</p><p>（3）弹窗设计：如果一个页面有多个弹窗，建议先设计一个抽象的弹窗基类。<strong>设计弹窗时，需要考虑的是</strong>：</p><ul><li>设计原则：易扩展、复用性强</li><li>避免重复代码</li><li>避免同一时间出现多个弹窗</li><li>弹窗的位置要严格居中（不能因为屏幕尺寸的大小变了，导致弹窗位置不居中）</li><li>处理滚动穿透这个顽疾。</li></ul><p>2、视觉构建：</p><p>（1）后端在开发接口时，前端做视觉构建；视觉构建完成后，前端根据接口文档的定义，通过 mock 数据的方式调接口，写前端逻辑；待接口开发完成后，可进入前后端联调阶段。</p><p>（2）建议前端童鞋学会自己切图，可控程度更高，也能减少沟通成本。学会基本的 PS、Sketch操作就行，做一名合格的前端切图仔。</p><p>（3）对于规则的样式和动画，建议用代码实现，而不是图片。图片会降低页面的打开性能，且大屏都显示效果比较模糊。</p><p>（4）切图的尺寸要求：100%宽度以 750px 为准。</p><p>（5）<strong>像素级还原视觉稿</strong>：推荐使用 <a href="https://zh.snipaste.com/">Snipaste</a> 截图软件，按F1截图，F2贴图，然后调整贴图的透明度为50%，将贴图与前端页面进行像素级比对。</p><p>3、业务逻辑实现：</p><p>（1）建议先用<strong>思维导图</strong>，梳理业务逻辑，再着手写代码。思维导图有利于理清逻辑、事后复盘、高效给他人讲解，一目了然。重要的是思想，而不是用哪一款工具更酷。</p><p>（2）在调用接口时，要明确前端自己的安全边界：假设接口字段异常时，前端需要有自己的降级措施，不能完全依赖和信任字段，导致让页面直接白屏、交互异常、甚至挂掉。</p><p>（3）除了完成产品要求的业务逻辑之外，还要时刻考虑异常流的设计和容灾。</p><p>（4）很多前端童鞋在做需求时，有个习惯是不喜欢细看prd，只对着交互稿和视觉稿进行开发。这样做虽然省事，但有三道手续不能少：</p><ul><li>开发前，一定要再和产品童鞋过一遍prd细节；</li><li>开发过程中，随时和产品童鞋反复沟通确认；</li><li>开发到80%时，自己对照prd，只字不差地阅读，看看是否有遗漏的地方。</li></ul><p>4、非功能性需求。业务代码写完后，还有很多细节需要打磨。比如：</p><ul><li>不同渠道的分享场景</li><li>文案配置检查：运营配置端要做校验；是给产品运营用的，配置要尽量人性化。</li><li>添加埋点：曝光上报、点击上报、呼吸上报</li><li>监控上报、测试上报、badjs上报</li><li>重复代码精简</li><li>去掉 console.log、debugger 等多余的代码</li><li>图片、字体等静态资源压缩</li><li>常见的性能优化：骨架屏（按需）、图片懒加载、图片预加载、防抖节流、长列表<em>滚动</em>到可视区域动态加载</li><li>用户体验完善：返回定位、滚动穿透</li><li>屏幕适配</li><li>小程序代码瘦身</li><li>容灾演习</li></ul><p>5、代码提交：</p><ul><li>先 git pull，再 git push，减少代码冲突。</li><li>commit粒度要尽量细</li><li>commit之前，一定要diff代码，确认每一行改动，以免提交不必要的改动。</li><li>Commit Message 常用格式：feat、fix、docs、merge</li><li>如合并代码时遇到冲突，一定要先解决完冲突后再提交代码。如冲突部分涉及到其他人的代码，一定要找到对应同学一起解决。</li></ul><p>6、自测：</p><ul><li>对照prd，查漏补缺。</li><li>在真机上体验页面，而不是在模拟器上。</li><li>写一部分测试用例，加快后续的测试进度。前面梳理的思维导图，其实就是测试的最佳素材。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建个人博客</title>
      <link href="/2025/02/02/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/02/02/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>参考这篇文章，有兴趣读原文<a href="https://blog.csdn.net/2401_83582688/article/details/144380760">【2025最新版】搭建个人博客教程-CSDN博客</a></p><p>之前我折腾的是基于hugo，但是这些主题有点难弄，我就用了最原始简单的，现在弄这个<strong>hexo</strong>的比较满意</p><h2 id="有一些前置的环境准备"><a href="#有一些前置的环境准备" class="headerlink" title="有一些前置的环境准备"></a>有一些前置的环境准备</h2><ol><li><p>安装git</p><pre class="line-numbers language-none"><code class="language-none">$ apt install git  /**/安装git$ git --version /**/查看git的版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装node.js环境</p><pre class="line-numbers language-none"><code class="language-none">$ sudo apt install npm # 下载npm软件包$ sudo apt install nodejs # 下载noede.js环境$ npm -v  # 验证环境中是否存在正确的 npm 版本$ node -v # 验证环境中是否存在正确的 node 版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注册 GitHub 账号，后续要使用github进行托管</p></li></ol><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><h3 id="1-安装hexo框架"><a href="#1-安装hexo框架" class="headerlink" title="1.安装hexo框架"></a>1.安装hexo框架</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-cli -g # 安装hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-初始化hexo"><a href="#2-初始化hexo" class="headerlink" title="2.初始化hexo"></a>2.初始化hexo</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo npm install hexo -g #安装hexo$ mkdir blog #此处可以是任意你喜欢的名字$ hexo init blog #初始化部署hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就代表我们已经初始化成功了,此时已经可以打开你的博客了，在Bash里面输入:</p><pre class="line-numbers language-none"><code class="language-none">$ hexo s <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-hexo-1.png"></p><p>这样就代表我们已经在我们的4000端口搭建好了网站。我们可以进入我们的网站看一下，如下图，这个就是我们使用的hexo框架</p><h3 id="3、安装butterfly主题"><a href="#3、安装butterfly主题" class="headerlink" title="3、安装butterfly主题"></a>3、安装butterfly主题</h3><h4 id="1-安装butterfly"><a href="#1-安装butterfly" class="headerlink" title="1.安装butterfly"></a>1.安装butterfly</h4><p>hexo-theme-butterfly 是基于 hexo-theme-melody 的基础上进行开发的主题。</p><p>在你的 Hexo 根目录里输入以下命令：</p><pre class="line-numbers language-none"><code class="language-none">$ git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly #下载稳定版butterfly主题<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你安装完成之后你可以看到自己的blog/themes下面多了一个butterfly主题，这样就代表我们已经安装好了我们的主题</p><h4 id="2-应用主题"><a href="#2-应用主题" class="headerlink" title="2.应用主题"></a>2.应用主题</h4><p>修改 Hexo 根目录下的 _config.yml，把主题改为 butterfly</p><pre class="line-numbers language-none"><code class="language-none">theme: butterfly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3.安装插件"></a>3.安装插件</h4><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-renderer-pug hexo-renderer-stylus --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-升级建议"><a href="#4-升级建议" class="headerlink" title="4.升级建议"></a>4.升级建议</h4><p>为了减少升级主题后带来的不便，请使用以下方法（建议，可以不做）：</p><p>在 hexo 的根目录创建一个文件 _config.butterfly.yml，并把主题目录的 _config.yml 内容复制到 _config.butterfly.yml 去。这边我建议用cp命令，直接将主题的config内容复制到hexo根目录上</p><pre class="line-numbers language-none"><code class="language-none">cp themes/butterfly/_config.yml  _config.butterfly.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意:</p><p>复制的是主题的 _config.yml ，而不是 hexo 的 _config.yml</p><p>不要把主题目录的 _config.yml 删掉</p><p>以后只需要在 _config.butterfly.yml 进行配置就行。如果使用了 _config.butterfly.yml， 配置主题的 _config.yml 将不会有效果。</p><p>Hexo 会自动合并主题中的 _config.yml 和 _config.butterfly.yml 里的配置，如果存在同名配置，会使用 _config.butterfly.yml 的配置，其优先度较高。</p></blockquote><p>5.启动环境</p><pre class="line-numbers language-none"><code class="language-none">hexo s #启动本地环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/%E5%8D%9A%E5%AE%A2-hexo-2.png"></p><h3 id="4、主题页面"><a href="#4、主题页面" class="headerlink" title="4、主题页面"></a>4、主题页面</h3><p>打开hexo根目录的_config.yml，首先出现的时网站的页面配置，我们按需修改我们自己的主题名字和标题</p><p>注释是我自己打上去的，记得<strong>每一个冒号后面都要空一格</strong>，这样才能显示出来效果</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-hexo-2.png"></p><p>然后我们可以在_config.butterfly.yml中配置我们的网站图标</p><p>有其他想自己设计捣鼓的可以参考这个博客，我就不一一介绍了</p><p>最终我的博客是这样子的</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-hexo-4.png"></p><pre class="line-numbers language-none"><code class="language-none">hexo new 我的第一篇博客  #创建标题为“我的第一篇博客”的文章hexo new 我的第e篇博客 #创建标题为“爱笑的个人博客搭建教程”的文章hexo cl #清除缓存hexo s #本地调试预览<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部署到GithubPage上"><a href="#部署到GithubPage上" class="headerlink" title="部署到GithubPage上"></a>部署到GithubPage上</h2><ol><li><p>登录 GitHub，新建一个 Repository，<code>Repository name</code>一定要是<code>你的用户名</code>.github.io</p></li><li><p>来到仓库主页，复制如下链接</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-hexo-5.png"></p></li><li><p>打开博客目录下的<code>_config.yml</code>，拉到最后，填写<code>deploy</code>模块：<code>repository</code> 填写刚才复制的链接</p><p><img src="https://fastly.jsdelivr.net/gh/KlayPeter/blog-image-bed@main/blog-hexo-6.png"></p></li><li><p>一定要安装 Git 插件：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>现在可以将博客部署上去了，执行</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo c <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d  <span class="token comment"># hexo d 表示执行部署</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行成功可以通过 你的用户名.github.io 来访问博客了。</p><hr><p><strong>至此搭建博客并部署已全部完成。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小玩意儿 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2025/02/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/02/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>就是我的第一篇博客，以后就会分享和记录更多自己的学习情况和心得体会在这里，见证走过的路，取得的成就！！！虽迟但到，我相信我会一直坚持下去的！！！😀</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
